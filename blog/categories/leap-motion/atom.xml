<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Catégorie : Leap Motion | Guirec Corbel]]></title>
  <link href="http://GCorbel.github.io/blog/blog/categories/leap-motion/atom.xml" rel="self"/>
  <link href="http://GCorbel.github.io/blog/"/>
  <updated>2015-01-20T07:07:25-05:00</updated>
  <id>http://GCorbel.github.io/blog/</id>
  <author>
    <name><![CDATA[Guirec Corbel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PyLeapMouse: Commandez votre OS par la voix ET les mouvements]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/11/01/sbire-et-leapmotion-commandez-votre-os-par-la-voix-et-les-mouvements/"/>
    <updated>2013-11-01T19:34:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/11/01/sbire-et-leapmotion-commandez-votre-os-par-la-voix-et-les-mouvements</id>
    <content type="html"><![CDATA[<p>Suite à <a href="http://gcorbel.github.io/blog/blog/2013/10/27/sbire-dites-ce-que-vous-voulez-il-le-fera/">mon article et ma vidéo</a> sur <a href="https://github.com/gcorbel/sbire">Sbire</a>, je poursuis dans ma lancée pour expliquer comment j'ai modifier le projet PyLeapMouse pour coupler LeapMotion et Sbire.
<a href="https://www.leapmotion.com/">LeapMotion</a> est un très bon outil permettant de détecter les mouvements. L'une des fonctionnalités évidentes que l'on imagine rapidement avec LeapMotion est de remplacer la souris pour commander le système d'exploitation.
Pour cela, il existe le projet <a href="https://github.com/openleap/PyLeapMouse">openleap/PyLeapMouse</a>. Celui-ci émule le pointeur de la souris et permet de simuler les clics.
Dans cet article, vous verrez le cheminement que j'ai effectué pour contrôler l'OS avec LeapMotion.</p>

<!--more-->


<h2>Exemple d'utilisation</h2>

<p>Avant de commencer, voici une courte vidéo montrant l'utilisation de PyLeapMouse et Sbire.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/l1BxiD1dx5s "></iframe></div></p>

<h2>Diriger la souris/Executer des commandes?</h2>

<p>Mon objectif principal pour cette application est de contrôler l'OS avec LeapMotion. En tant qu'adepte de l'Open-Source, j'ai premièrement cherché s'il existait un projet le permettant. Je suis tombé sur <a href="https://github.com/archetipo/leapmouse">LeapMouse</a>, écrit en C. J'ai rapidement vu les problèmes existants pour diriger la souris. Pour ma part, je mettais plus de 10 secondes pour réussir à fixer un bouton ou une icône. Sur ce point, l'utilisation classique de la souris est beaucoup plus efficace.
De plus, il est nécessaire de maintenir la main à une certaine distance du contrôleur. On doit donc la maintenir en hauteur ce qui est rapidement fatigant.</p>

<p>Le fait d'effectuer des commandes en fonction des mouvements m'a paru une méthode plus efficace et plus précise. Tout d'abord, une commande doit être actionnée par un mouvement court. Il n'est donc pas nécessaire de maintenir la main en suspension pendant une longue période. De plus, le besoin de précision est moindre ce qui rend l'utilisation plus efficace.</p>

<h2>Pourquoi Python?</h2>

<p>Il existe plusieurs SDK pour LeapMotion. Malheureusement pour moi, Ruby, mon langage préféré, n'est pas disponible officiellement. J'avais donc l'embarras du choix des langages.</p>

<p>LeapMouse étant écrit en C, je me suis demandé pourquoi choisir ce langage plutôt qu'un autre. Il est vrai que ce langage possède l'avantage d'être plus bas niveau. La plupart des outils disponibles dans les autres langages sont des dérivés. Également, le C est très avantageux au niveau de la performance. Ces deux points constituent des avantages non négligeables pour l'utilisation du C.</p>

<p>Cela faisait longtemps que je n'avais pas utilisé le C. Étant habitué à Ruby, j'avais un peu d'aprioris à utiliser un langage moins moderne. Je pensais avoir plus de mal avec la syntaxe, mais finalement c'est la difficulté à inclure des librairies qui m'a repoussé. Grâce à bundler, Ruby possède une manière très simple de gérer les dépendances d'un projet. En C, c'est parfois aussi simple de refaire des bouts de code. Réinventer la roue n'étant pas ce que je préfère, j'ai abandonné le C et pris la résolution de l'utiliser uniquement si je n'ai pas le choix. Évidemment, c'est une conclusion très personnelle. Libre à chacun de choisir autre chose.</p>

<p>Python est un langage tout aussi moderne que Ruby. La gestion des dépendances se fait également très bien avec Pip. Bien que la philosophie soit différente que celle de Ruby, il est très facile de passer de l'un à l'autre. De plus, c'est toujours agréable de découvrir autre chose et de changer un peu.</p>

<h2>Pourquoi PyLeapMouse?</h2>

<p>Ensuite, j'ai choisi de modifier <a href="https://github.com/openleap/PyLeapMouse">openleap/PyLeapMouse</a>. Tout d'abord PyLeapMouse possède déjà un bon nombre de fonctionnalités. De plus, il est relativement populaire et possède déjà une bonne communauté. Ce choix fut assez rapide. Je crois que c'est le projet le plus abouti concernant le contrôle de la souris avec LeapMotion.</p>

<h2>Mon développement sur PyLeapMouse</h2>

<p>Malgré le fait que PyLeapMouse soit fonctionnel, l'utiliser pour déplacer le pointeur de la souris est très fastidieux. Ceci est dû aux limites expliquées dans <a href="http://gcorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur/">cet article</a>.</p>

<p>J'ai donc fait un fork du projet pour ajouter la possibilité d'exécuter des commandes en fonctions des mouvements effectuées. Le fonctionnement est assez simple. PyLeapMouse va lire un fichier <code>commands.ini</code> comme celui-ci :</p>

<pre><code>[screentap]

[keytap]

[swiperight]
1finger: rhythmbox-client --next

[swipeleft]
1finger: rhythmbox-client --previous

[clockwise]
1finger: sbire start
2finger: sbire start
3finger: sbire start
4finger: sbire start
5finger: sbire start

[counterclockwise]
1finger: sbire stop
2finger: sbire stop
3finger: sbire stop
4finger: sbire stop
5finger: sbire stop
</code></pre>

<p>À chaque changement détecté par LeapMotion, le programme recherche dans une liste d'objets avec des classes comme celle-ci :</p>

<p>``` python
class KeytapCommand():</p>

<pre><code>def __init__(self):
    self.name = "keytap"

def applicable(self, frame):
    return(frame.gestures()[0].type == Leap.Gesture.TYPE_KEY_TAP)
</code></pre>

<p>```</p>

<p>Chaque commande possède un nom, permettant de l'identifier, et une fonction <code>applicable</code> permettant de voir si les conditions sont réunies pour exécuter la commande en fonction de la variable <code>frame</code> représentant les données passées par LeapMotion.</p>

<p>Ensuite, il va rechercher dans la configuration quelle commande il doit exécuter en fonction du nombre de doigts reconnus et du mouvement. Pour plus de détails, vous pouvez voir le <a href="https://github.com/openleap/PyLeapMouse/blob/master/MotionControl.py">code complet sur GitHub</a>.</p>

<p>Cette amélioration rend l'utilisation plus efficace, mais n'est pas fiable à 100%. Il y a très souvent des imperfections dans les mouvements détectés.</p>

<p>Afin d'augmenter la précision, il existe des projets comme <a href="https://github.com/roboleary/LeapTrainer.js">LeapTrainer</a>. Celui-ci fait en sorte que le système apprend les mouvements. Il est ensuite possible d'exporter le mouvement appris puis de l'importer dans d'autres outils. C'est effectivement un très bon projet, mais cela manque encore d'efficacité.</p>

<h2>Pourquoi lier avec Sbire?</h2>

<p>Malrgès le fait que lier les commandes aux mouvements soit plus précis, il reste encore beaucoup d'erreurs. C'est pour cette raison qu'il est mieux de le coupler avec Sbire. Sbire est plus précis et les possibilités sont plus vastes. LeapMotion possède une petite liste de mouvements prédéfinis. Sbire, quant à lui, peut reconnaitre un nombre illimité de phrases pour chercher les commandes à exécuter.</p>

<h2>Conclusion</h2>

<p>Je pense que le couplage des deux outils est plutôt bien. Cependant, je trouve qu'utiliser un raccourci clavier pour démarrer et arrêter Sbire est encore une solution plus efficace. Je crois que LeapMotion a encore du travail à faire pour rendre l'outil 100% fonctionnel.</p>

<p>À sa décharge, LeapMotion est encore en développement et les développeurs se font une priorité d'augmenter la précision dans les prochaines versions. Je suis encore plein d'espoir pour cet outil.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leap Motion : le point de vue d'un développeur]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur/"/>
    <updated>2013-10-12T07:41:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur</id>
    <content type="html"><![CDATA[<p>La semaine dernière, la société <a href="http://www.optik360.com/">Optik 360</a>, spécialisée en photo 360 degrés, m'a demandé de tester Leap Motion en faisant une application permettant de visionner des images panoramiques. L'image devait se déplacer en fonction des mouvements fait par l'utilisateur.</p>

<p>Pour ceux qui ne connaissent pas encore Leap Motion, il s'agit d'un petit capteur de mouvements d'environ 8 centimètres. Pour plus d'informations, rendez-vous sur <a href="https://www.leapmotion.com/">leur site officiel</a>.</p>

<!--more-->


<h2>Phase 1 : Installation</h2>

<p>Sous Windows, l'installation s'est faite en moins de 5 minutes. Je me suis rendu sur la page indiquée pour télécharger l'application, je l'ai installée et mes mouvements ont été détectés par le contrôleur Leap Motion.</p>

<p>Je m'attendais à ce que mon CPU soit surchargé. Ce n'est vraiment pas le cas. Quand je bouge devant le contrôleur, Leap Motion prend 7% du CPU. Windows Media Player prend 8%. J'ai pourtant choisi le maximum de précision, au détriment de la rapidité, dans le panneau de configuration. Donc, il n'y a aucun problème au niveau de la rapidité.</p>

<p>Après avoir bougé les mains dans tous les sens en testant les applications fournies (mon chien me prend pour un fou), j'ai voulu l'installer sur Ubuntu 12.04. Il est possible de télécharger une version du SDK compatible Linux sur leur site. L'installation se fait également très rapidement. Le contrôleur et le panneau de configuration se sont lancés correctement. Le seul problème que j'ai rencontré : ça ne fonctionne pas. Le contrôleur ne reconnait pas mes mouvements alors qu'il n'y a aucun problème sur Windows. J'ai envoyé <a href="https://developer.leapmotion.com/forums/forums/10/topics/1811">un message sur leur forum</a>. Pour le moment, je n'ai eu aucune réponse. On va voir pour la suite.</p>

<h2>Phase 2 : Premier développement</h2>

<p>Par la suite, je suis retourné sur Windows pour commencer à développer. Leap Motion possède des SDK officiels dans plusieurs langages. Malheureusement, mon langage préféré, Ruby, n'est pas supporté officiellement. Je trouve ça génial d'avoir choisi d'être compatible avec plusieurs langages. Ça laisse énormément de possibilités aux développeurs.</p>

<p>Pour mon projet, j'ai choisi de développer en JavaScript. LeapMotion permet de faire une application coté client. L'application écoute un certain port pour recevoir des données depuis le contrôleur. Le choix du JavaScript s'est fait uniquement sur le fait qu'il n'est pas nécessaire de faire une installation sur un PC. Un simple navigateur (moderne), permet d'avoir une application qui fonctionne avec Leap. Génial!</p>

<p>La bibliothèque offerte par Leap est impressionnante. C'est super simple de faire une application. Il suffit de quelques lignes de code. Voici un exemple :</p>

<p><code>javascript
Leap.loop(function(frame) {
  console.log(frame.fingers.length);
});
</code></p>

<p>Ce petit bout de code permet de voir le nombre de doigts détectés par le contrôleur. N'importe quel développeur est capable de faire ça.</p>

<h2>Phase 3 : Recherche d'une bibliothèque JavaScript</h2>

<p>Après quelques tests, je me suis mis à la recherche d'un code existant permettant d'afficher une image panoramique. Je suis tombé sur <a href="http://mrdoob.github.io/three.js/examples/webgl_panorama_equirectangular.html">ce projet</a>. L'avantage de ce code est qu'il utilise <a href="http://threejs.org/">Three.js</a>. Three.js est une bibliothèque permettant de faire des animations 3D en JavaScript. Il existe beaucoup d'<a href="http://mrdoob.github.io/three.js/">exemples fournis pas les développeurs de Three.js</a>. Avec du travail, on peut développer une version compatible avec Leap de tous ces exemples.</p>

<p>J'ai donc téléchargé le code en local et j'ai commencé à le modifier pour le mettre un peu plus &ldquo;à ma sauce&rdquo;. Je l'ai changé pour qu'il soit un peu plus orienté objet et j'ai utilisé coffeescript.</p>

<h2>Phase 4 : Intégration de Leap à la bibliothèque</h2>

<p>J'ai étudié le comportement de la souris et j'ai voulu le reproduire. Tout d'abord, j'ai extrait le code relatif à la souris dans un objet à part. Pour tester le déplacement avec Leap Motion, mon premier réflexe a été de faire ce genre de code :</p>

<p>``` coffeescript
class LeapPano.LeapMotion
  constructor: (view) &ndash;></p>

<pre><code>@view = view
</code></pre>

<p>  init: =></p>

<pre><code>Leap.loop((frame) =&gt;
  @view.setLon(@view.getLon() + .1)
)
</code></pre>

<p>```</p>

<p>Ce code permet, à chaque itération, de déplacer horizontalement la caméra. Le problème que je trouve avec ce que est que je ne gère pas la rapidité des itérations. Je n'ai pas trouvé de façon de faire dans la documentation de Leap. J'ai donc choisi de modifier le code comme ceci :</p>

<p>``` coffeescript
class LeapPano.LeapMotion
  constructor: (view) &ndash;></p>

<pre><code>@view = view
</code></pre>

<p>  setFrame: (frame) &ndash;></p>

<pre><code>@frame = frame
</code></pre>

<p>  init: &ndash;></p>

<pre><code>setTimeout(@checkMotion, 10)
</code></pre>

<p>  checkMotion: =></p>

<pre><code>if @frame?
  @view.setLon(@view.getLon() + .1)

setTimeout(@checkMotion, 10)
</code></pre>

<p>```</p>

<p>L'appel de la fonction <code>Leap.loop</code> est extraite de cet objet et le résultat est passé via un setter à chaque itération. À l'initialisation, la fonction setTimeout, permettant d’exécuter la fonction de reconnaissance des mouvements toutes les dix millisecondes, est lancée. Ce code permet également de ne pas avoir plusieurs appels à la fonction <code>Leap.loop</code>. La boucle est lancée dans la page principale et les données détectées sont transmises aux différents objets en ayant besoin. Je crois que c'est une meilleure architecture.</p>

<p>Maintenant que ça marche comme je veux, je peux m'occuper de la reconnaissance des mouvements. J'ai modifié la fonction <code>checkMotion</code> comme ceci :</p>

<p>``` coffeescript
checkMotion: =>
  if @frame?</p>

<pre><code>finger = @frame.fingers[0]
if finger?
  x = finger.tipPosition[0]
  y = finger.tipPosition[1]
  @view.setLon(@view.getLon() + (x/320))
  @view.setLat(@view.getLat() + ((y-160)/320))
</code></pre>

<p>  setTimeout(@checkMotion, 10)
```</p>

<p><code>@frame.fingers[0]</code> permet de récupérer le premier doigt détecté. <code>finger.tipPosition</code> retourne un tableau contenant la position en X, en Y et en Z. Enfin, je change la position de la caméra dans la scène 3D. Le calcul d'un ratio permet de faire en sorte d’accélérer ou de ralentir le mouvement selon la position du doigt. Plus le doigt est éloigné du centre, plus le déplacement est rapide.</p>

<p>La dernière fonction que j'ai voulu ajouté a été de changer l'image lorsque l'on décrit un cercle. J'ai donc ajouté ceci :</p>

<p>``` coffeescript
if(@frame.gestures.length > 0)
  gesture = @frame.gestures[0]
  if gesture.type == &ldquo;circle&rdquo;</p>

<pre><code>@view.switchFile()
</code></pre>

<p>```</p>

<p>Encore une fois, c'est très simple. <code>@frame.gestures</code> retourne une liste des mouvements détectés. Par la suite, il faut vérifier si le type de mouvement est un cercle. Si c'est le cas, alors on change d'image.</p>

<p>Pour permettre la reconnaissance des mouvements, il est nécessaire d'appeller la fonction <code>Leap.loop</code> :</p>

<p><code>coffeescript
Leap.loop({enableGestures: true}, function(frame) {
  pano.setFrame(frame)
})
</code></p>

<p>Et voila! Tout fonctionne. En tant que bon contributeur Open-Source j'ai affiché le code ici : <a href="https://github.com/GCorbel/LeapPano">https://github.com/GCorbel/LeapPano</a>. J'ai également créé un page grâce a <a href="http://pages.github.com/">GitHub-Pages</a> visible ici : <a href="http://gcorbel.github.io/LeapPano/">http://gcorbel.github.io/LeapPano/</a>.</p>

<h2>Ce que j'aime dans Leap Motion</h2>

<p>Premièrement, j'ai beaucoup aimé la facilité d'installation. On branche, on installe et ça marche. Le développement est extrêmement facile. L'API fournie est la plus simple possible. Le fait qu'elle soit disponible en plusieurs langages est génial. Je suis vraiment impressionné des possibilités fournies et de la simplicité.</p>

<h2>Là où j'ai des doutes</h2>

<p>Petit bémol pour la documentation. Je trouve que la documentation officielle est assez peu détaillée. Il y a peu de code affiché. Pour voir du code réel, il est nécessaire de rechercher les exemples disponibles sur GitHub.</p>

<p>Au niveau de la reconnaissance des mouvements, il existe trois mouvements &ldquo;de base&rdquo; : Circle, Swipe et Tap. Ajouter d'autres mouvements est beaucoup plus complexe. On ne peut pas imaginer faire un jeu comme <a href="http://fr.wikipedia.org/wiki/Black_and_White_%28jeu_vid%C3%A9o%29">Black &amp; White</a> pour le moment.</p>

<p>Le gros point faible est la précision. Le nombre de doigts détectés n'est pas toujours réel et la position est approximative. Quand on y pense, c'est normal. Si l'on pointe une image vers l'écran, notre doigt tremble. Viser une icône peut être très long. Leap Motion ne n'est pas prêt à remplacer la souris.</p>

<p>De plus, je trouve que la détection de pointeurs est très hasardeuse. Un crayon passe de détecté à non détecté sans raison. La détection des doigts est beaucoup plus stable.</p>

<p>Ceci dit, Leap Motion est à sa version 0.8. Il s'agit d'un système tout nouveau. On peut imaginer que le système va s'améliorer au fil du temps.</p>

<h2>Conclusion</h2>

<p>J'adore Leap Motion. Il suffit de compter le nombre de fois ou j'ai marqué &ldquo;Génial&rdquo; dans cet article pour le comprendre.</p>

<p>Le futur comme imaginé dans les années 80/90 est à notre portée. On n'est pas encore capable de faire des tableaux comme dans Minority Report mais on s'y approche. Des technologies comme Leap, Google Voice, Google glaces, la domotique, etc. font rêver. Le futur est accessible et n'importe quel développeur est capable de faire des choses impressionnantes.</p>
]]></content>
  </entry>
  
</feed>
